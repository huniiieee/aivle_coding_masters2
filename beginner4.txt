문제:
기성이는 코딩 테스트 출제를 전문으로 하는 기업에서 일하고 있습니다. 
고객마다 서로 다른 요구사항이 있기 때문에 문제의 난이도, 입출력 등을 잘 관리해야 합니다. 
오늘은 A 기업에서 주문한 문제를 만들고 있습니다. A 기업의 요구사항 중 하나는 다음과 같습니다: 
입력 파일의 크기가 M보다 크지 않게 해주세요.

기성이가 만든 문제의 입력 파일에는 공백으로 구분된 정수 N개가 저장되어 있습니다. 
i번째 정수가 L[i]자리 수라면, 입력 파일의 크기는 L[1] + L[2] + … + L[N-1] + L[N] + (N - 1)입니다. 
N - 1은 공백이 차지하는 크기입니다. 예를 들어 입력 파일 1 2 30 123의 크기는 10입니다.

그런데 아뿔싸, 입력 파일의 크기가 M보다 큰 것 이였습니다. 
기성이는 이 문제를 해결하기 위해 정수를 10진법 대신 다른 진법으로 표기하기로 했습니다. 
10진법 정수 123(= 1 × 10² + 2 × 10¹ + 3 × 10⁰)은 12진법으로 A3(= A × 12¹ + 3 × 12⁰)으로 표기하고,
 40진법으로 33(= 3 × 40¹ + 3 × 40⁰)으로 표기합니다. 10진법 0부터 9까지는 똑같이 0부터 9로, 
 10부터 35까지는 A부터 Z까지의 대문자 알파벳으로, 36부터 62까지는 a부터 z까지의 소문자 알파벳을 사용합니다.

예를 들어 입력 파일 1 2 30 123을 12진법으로 표기하면 1 2 26 A3이 되어 파일의 크기가 9로 줄어듭니다. 
입력 파일의 크기가 M 이하가 되는 10 이상의 가장 작은 진법을 출력하는 프로그램을 작성해 주세요.

답안:
package Chapter2;

//don't place package name. 

import java.io.*;

import java.util.*; 

//don't change 'Main' class name and  'public' accessor. 

public class Main {
 public static void main(String[] args) throws IOException { 

     Scanner scanner = new Scanner(System.in); 

     int len = scanner.nextInt(); 

     int target = scanner.nextInt(); 
     target= target-len+1;
     int [] file=new int[len];
     int max=Integer.MIN_VALUE;
     for(int i=0;i<len;i++)
     {
    	 file[i]=scanner.nextInt();
    	 if(file[i]>max)
    		 max=file[i];
     }
    	 

     int low=10;
     int high=63;
     int mid=0;
     int result=0;
     int cnt=0;
     int sum=0;
     int temp=1;
    
     
     while(low<=high)
     {
    	 mid=(low+high)/2;
    	 temp=mid;
    	 cnt=1;
    	 sum=0;
    	 boolean []visited=new boolean[len];
    	 while(temp<max*mid)
    	 {
    		 for(int i=0;i<len;i++)
    		 {
    			 if(file[i]<temp&!visited[i]) {
    				 sum +=cnt;
    				 visited[i]=true;
    			 }
    		 }
    		 temp=temp*mid;
    		 cnt++;
    	 }
    	 
    	 
    	 if(sum<=target)
    	 {
    		 result=mid;
    		 high=mid-1;
    	 }
    	 else
    		 low=mid+1;
     }
     
     if(mid==63)
    	 System.out.println(-1);
     else
    	 System.out.println(result);

 }
}