문제:
1부터 N까지의 자연수로 이루어진 순열이 있습니다. 
이 순열의 사전 순으로 가장 앞서는 순열은 오름차순으로 이루어진 순열이고, 가장 마지막에 오는 순열은 내림차순으로 이루어진 순열입니다.
예를 들어 N이 3인 경우 사전 순으로 나열하면 다음과 같습니다.
1 2 3
1 2 3
1 3 2
2 1 3
2 3 1
3 1 2
3 2 1

이때 순열 (2 3 1)의 사전 순으로 다음 순열은 (3 1 2) 입니다.
또한 순열 (2 3 1)의 사전 순으로 2번째 다음 순열은 (3 2 1)입니다.

대희는 "대희식 순서"를 만들었습니다. "대희식 순서"란 사전식 순서를 따르면서 다음 규칙 하나를 추가한 것입니다.
사전 순으로 가장 마지막 순열의 다음 순열은 사전 순으로 가장 앞서는 순열이다.

예를 들어 N이 3인 경우
순열 (3 1 2)의 대희식으로 다음 순열은 (3 2 1) 입니다.
순열 (3 1 2)의 대희식으로 2번째 다음 순열은 (1 2 3)입니다.

어떤 순열이 주어질 때 대희식으로 K번째 다음 순열을 출력하는 프로그램을 작성해 주세요.

답안:

import java.io.*;

import java.util.*;

//don't change 'Main' class name and  'public' accessor.

public class Main {
    public static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    public static void nextPermutation(int[] nums) {
        int i = nums.length - 2;


        while (i >= 0 && nums[i] >= nums[i + 1]) {
            i--;
        }
        if (i >= 0) {
       
            int j = nums.length - 1;
            while (nums[j] <= nums[i]) {
                j--;
            }
            swap(nums, i, j);
        }

        reverse(nums, i + 1);
    }

    private static void swap(int[] nums, int i, int j) {
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }

    private static void reverse(int[] nums, int start) {
        int end = nums.length - 1;
        while (start < end) {
            swap(nums, start, end);
            start++;
            end--;
        }
    }
    public static void main(String[] args) throws IOException {

        Scanner scanner = new Scanner(System.in);
        StringTokenizer st = new StringTokenizer(br.readLine());
        int N= Integer.parseInt(st.nextToken());
        int k=Integer.parseInt(st.nextToken());
        st = new StringTokenizer(br.readLine());
        int []map=new int[N];
        for(int i=0;i<N;i++)
            map[i]= Integer.parseInt(st.nextToken());
        for(int i=0;i<k;i++)
            nextPermutation(map);

        for(int i=0;i<N;i++)
        {
            System.out.print(map[i]+" ");
        }

    }
}
