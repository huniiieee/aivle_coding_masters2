문제:
전개도는 입체를 평면으로 펼쳐서 그리는 도형을 말합니다.
전개도는 입체도형의 모서리를 잘라서 펼친 모양으로 나타나며, 모든 면은 적어도 하나 이상의 면과 연결되어 있어야 합니다.
준하는 10 x 10 크기의 격자를 가지고 있습니다. 이 격자에는 0부터 9까지의 정수가 하나 씩 쓰여져 있습니다.
이 격자에서 하나의 정육면체를 만들 수 있는 전개도를 잘라내려고 합니다. 
만들어진 정육면체에 쓰인 수의 합이 최대가 되도록 전개도를 잘라내려고 할 때, 그 수들의 합을 출력하는 프로그램을 작성해 주세요.


정육면체 전개도는 아래와 같이 다양한 모양으로 나타날 수 있습니다.

답안:
import java.io.*;
import java.util.*;

public class Main {
    static int[][] grid = new int[10][10];
    static int maxSum = 0;
    static int[][][] patterns = {
            {{0, 0}, {1, 0}, {2, 0}, {1, 1}, {1, 2}, {1, 3}},
            {{0, 0}, {1, 0}, {1, 1}, {2, 1}, {1, 2}, {1, 3}},
            {{0, 0}, {1, 0}, {1, 1}, {1, 2}, {2, 2}, {1, 3}},
            {{0, 0}, {1, 0}, {1, 1}, {1, 2}, {1, 3}, {2, 3}},
            {{0, 0}, {1, 0}, {1, -1}, {2, 0}, {1, 1}, {1, 2}},
            {{0, 0}, {1, 0}, {1, -1}, {1, 1}, {1, 2}, {2, 1}},
            {{0, 0}, {1, 0}, {1, 1}, {1, 2}, {2, 2}, {2, 3}},
            {{0, 0}, {1, 0}, {1, -1}, {1, 1}, {2, 1}, {2, 2}},
            {{0, 0}, {0, 1}, {0, 2}, {-1, 2}, {1, 2}, {1, 3}},
            {{0, 0}, {0, 1}, {0, 2}, {1, 2}, {1, 3}, {1, 4}},
            {{0, 0}, {0, 1}, {1, 1}, {1, 2}, {2, 2}, {2, 3}}
    };

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

        for (int i = 0; i < 10; i++) {
            String[] line = br.readLine().split(" ");
            for (int j = 0; j < 10; j++) {
                grid[i][j] = Integer.parseInt(line[j]);
            }
        }
        for (int[][] pattern : patterns) {
            for (int x = 0; x < 10; x++) {
                for (int y = 0; y < 10; y++) {
                    checkPattern(pattern, x, y);
                    for (int r = 0; r < 4; r++) {
                        rotatePattern(pattern);
                        checkPattern(pattern, x, y);
                    }
                    flipPattern(pattern);
                    for (int r = 0; r < 4; r++) {
                        rotatePattern(pattern);
                        checkPattern(pattern, x, y);
                    }
                }
            }
        }

        System.out.println(maxSum);
    }


    static void checkPattern(int[][] pattern, int startX, int startY) {
        int sum = 0;
        boolean isValid = true;

        for (int[] p : pattern) {
            int nx = startX + p[0];
            int ny = startY + p[1];
            if (nx < 0 || nx >= 10 || ny < 0 || ny >= 10) { 
                isValid = false;
                break;
            }
            sum += grid[nx][ny];
        }

        if (isValid) {
            maxSum = Math.max(maxSum, sum);
        }
    }

    static void rotatePattern(int[][] pattern) {
        for (int[] p : pattern) {
            int temp = p[0];
            p[0] = p[1];
            p[1] = -temp;
        }
    }

    static void flipPattern(int[][] pattern) {
        for (int[] p : pattern) {
            p[1] = -p[1];
        }
    }
}