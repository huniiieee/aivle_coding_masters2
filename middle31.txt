문제:
철수는 식당 A에서 배달 아르바이트를 시작했습니다. 
식당 A는 도시에서 소문난 맛집입니다. 
한 번에 한 집씩만 배달하게 되면 밀려오는 주문 속도를 감당할 수 없습니다. 따라서 철수는 한 번에 K개의 집에 음식을 배달합니다.
 즉, K개의 집이 주문한 음식을 모두 들고 A에서 출발하고, 모든 음식을 배달하면 A로 돌아갑니다.

식당 A가 위치한 도시는 격자판 모양입니다. 격자판의 왼쪽에서부터 x번째, 위에서부터 y번재 칸을 (x, y)로 표현합니다. 격자판의 한 칸은 하나의 집을 의미합니다. 
단, (1, 1)에는 집 대신 식당 A가 위치합니다.

철수는 현재 위치한 칸에서 상하좌우로 인접한 칸으로 이동할 수 있습니다. 단, 격자판의 밖으로 벗어날 수 없습니다. 철수가 한 칸 이동할 때마다 1분이 소요됩니다.

예를 들어 철수가 현재 위치한 칸이 (2, 3)이라고 가정하겠습니다. 철수는 (1, 3), (2, 2), (2, 4), (3, 3) 중 하나의 칸으로 이동할 수 있습니다.

음식을 주문한 집의 좌표 N개가 주어졌을 때, 철수가 A에서 출발해 K개의 집에 음식을 배달하고 다시 A로 돌아오는 데 걸리는 최소 시간을 구하는 프로그램을 작성해주세요.

답안:

import java.awt.*;
import java.io.*;

import java.util.*;

// don't change 'Main' class name and  'public' accessor.

public class Main {
    static int K;
    static int N;
    static int min=Integer.MAX_VALUE;
    static void dfs(int [][]map,boolean[]visited,int cnt,int sum,int x,int y)
    {
        if(cnt==K)
        {
            sum=sum+x+y-2;
            min= Integer.min(min,sum);

            return;
        }

        for(int i=0;i<N;i++)
        {
            if(!visited[i])
            {
                visited[i]=true;
                int newSum =sum+(int)Math.abs(map[i][0]-x)+(int)Math.abs(map[i][1]-y);
                dfs(map,visited,cnt+1,newSum,map[i][0],map[i][1]);
                visited[i]=false;
            }
        }
    }


    public static void main(String[] args) throws IOException {

        Scanner scanner = new Scanner(System.in);
        N = scanner.nextInt();
        K = scanner.nextInt();
        int [][]map=new int[N][3];
        for (int i = 0; i < N; i++) {
            map[i][0]=scanner.nextInt();
            map[i][1]=scanner.nextInt();
            map[i][2]=map[i][0]+map[i][1];
        }
        boolean []visited=new boolean[N];
        dfs(map,visited,0,0,1,1);
        System.out.print(min);

    }
}