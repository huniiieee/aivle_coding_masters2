문제: (BFS)
개구리 F가 사는 마을은 가로 길이와 세로 길이가 모두 N인 N × N 크기의 격자판 모양입니다. 
격자판의 위에서부터 x번째, 왼쪽에서부터 y번째 칸을 (x, y)로 표현합니다. 
격자판의 각 칸마다 높이가 있습니다. (x, y)의 높이는 H(x, y)로 표현합니다.

개구리 F는 자신의 집이 위치한 (1, 1)에서 출발해 친구의 집이 위치한 (N, N)으로 가려고 합니다.

개구리 F가 현재 위치한 칸 (a, b)에서 (c, d)로 이동하려면 다음 조건을 모두 만족해야 합니다. 
단, a, b, c, d는 모두 1 이상 N 이하의 양의 정수입니다.
조건 1. |a - c| + |b - d| = 1
조건 2. H(a, b) ≥ H(c, d)

예를 들어 개구리 F가 현재 위치한 칸이 (2, 3)이라고 가정하겠습니다. 
이 경우 개구리 F는 (1, 3), (2, 2), (2, 4), (3, 3) 중 (2, 3) 보다 높이가 낮은 칸으로 이동할 수 있습니다.

개구리 F는 조건 2를 최대 한 번 무시할 수 있습니다. 
즉, (1, 1)에서 출발해 (N, N)에 도착할 때까지 최대 한 번 높이가 낮은 칸에서 높이가 높은 칸으로 이동할 수 있습니다.

개구리 F가 사는 마을의 높이 정보가 주어질 때, (1, 1)과 (N, N)을 포함해 개구리 F가 거쳐야 하는 칸의 최소 개수를 구하는 프로그램을 작성해주세요.

답안:
import java.io.*;
import java.util.*;

// don't change 'Main' class name and  'public' accessor.

public class Main {
    static int []dx={0,1,0,-1};
    static int []dy={1,0,-1,0};
    public static void main(String[] args) throws IOException {

        BufferedReader br= new BufferedReader(new InputStreamReader(System.in));
        int N=Integer.parseInt(br.readLine());

        int [][]map=new int[N][N];
        for (int i = 0; i < N; i++) {
            String []temp=br.readLine().split(" ");
            for (int j = 0; j < N; j++) {
                map[i][j]=Integer.parseInt(temp[j]);
            }
        }
        Queue<int []> q= new LinkedList<>();
        q.offer(new int[]{0,0,0});
        int [][] result=new int[N][N];
        for (int i = 0; i < N; i++) {
            Arrays.fill(result[i],Integer.MAX_VALUE);
        }
        result[0][0]=1;
        boolean [][]visited=new boolean[N][N];
        while(!q.isEmpty())
        {
            int [] cur=q.poll();
            int x=cur[0];
            int y=cur[1];
            int check=cur[2];
            visited[x][y]=true;
            for (int i = 0; i < 4; i++) {
                int cx=x+dx[i];
                int cy=y+dy[i];
                if(cx>=0&&cx<N&&cy>=0&&cy<N&&!visited[cx][cy]){
                    if(map[x][y]>=map[cx][cy]){
                        result[cx][cy]=Integer.min(result[x][y]+1,result[cx][cy]);
                        q.offer(new int[]{cx,cy,check});
                    }
                    else{
                        if(check==0){
                            result[cx][cy]=Integer.min(result[x][y]+1,result[cx][cy]);
                            q.offer(new int[]{cx,cy,check+1});
                        }
                    }
                }
            }
        }
        System.out.println(result[N-1][N-1]==Integer.MAX_VALUE ? -1: result[N-1][N-1]);
    }
}