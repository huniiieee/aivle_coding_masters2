문제:
철수의 마을에는 총 N명의 사람이 존재하고, 각 사람에게는 1번부터 N번까지 번호가 붙어있습니다.

철수는 마을 사람들의 친구 관계를 그래프로 모델링했습니다. 
그래프의 정점은 N개이고, 간선은 M개입니다. 각 정점에는 1번부터 N번까지 번호가 붙어있습니다.
 i번 사람은 i번 정점에 대응합니다. 간선은 양방향입니다.

u번 정점과 v번 정점을 잇는 간선이 존재하는 경우, u번 사람과 v번 사람이 친구임을 의미합니다.

마을의 각 사람은 정확히 하나의 그룹에 속합니다.

u번 정점에서 v번 정점으로 가는 경로가 존재하는 경우, u번 사람과 v번 사람이 같은 그룹에 속함을 의미합니다.

그룹의 ID는 해당 그룹에 포함된 사람들의 번호 중 가장 작은 번호입니다.

마을에 존재하는 그룹 중 가장 많은 사람이 포함된 그룹의 ID를 구하는 프로그램을 작성해주세요.

답안:

import java.io.*;

import java.util.*; 

//don't change 'Main' class name and  'public' accessor. 

public class Main {
 public static void main(String[] args) throws IOException { 

     Scanner scanner = new Scanner(System.in); 

     int num = scanner.nextInt(); 

     int edge = scanner.nextInt(); 

     int [][]graph=new int[num+1][num+1];
     boolean []visited = new boolean[num+1];
     
     for(int i=0;i<edge;i++)
     {
    	 int s=scanner.nextInt();
    	 int e=scanner.nextInt();
    	 graph[s][e]=1;
    	 graph[e][s]=1;
     }
     
     int number=Integer.MIN_VALUE;
     int result=0;
     
     for(int i=1;i<=num;i++)
     {
    	 int cnt=0;
    	 Queue<Integer> q= new LinkedList<>();
    	 if(visited[i])
    		 continue;
    	 q.offer(i);
    	 while(!q.isEmpty())
    	 {
    		 int cur=q.poll();
    		 for(int j=1;j<=num;j++)
    		 {
    			 if(graph[cur][j]==1&&!visited[j])
    			 {
    				 q.offer(j);
    				 cnt++;
    				 visited[j]=true;
    			 }
    		 }
    	 }
    	 if(number<cnt)
    	 {
    		 number=cnt;
    		 result=i;
    	 }
     }
     System.out.print(result);

 }
}