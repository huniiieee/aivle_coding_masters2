문제:
동근이는 정사면체 주사위를 가지고 놀고 있습니다.
 주사위의 각 면에는 1부터 4까지의 숫자가 하나씩 적혀있습니다. 
 동근이는 문득 정사면체 주사위를 한 번 이상 던져 나온 눈금의 합이 N이 되는 경우의 수가 궁금해졌습니다.

동근이를 위해 자연수 N이 주어졌을 때, 주사위의 눈금의 합이 N이 되는 경우의 수를 1,000,000,007로 나눈 나머지를 출력하는 프로그램을 작성해 주세요.

예를 들어 눈금의 합이 N=3인 경우의 수는 다음과 같이 4개입니다.
1 + 1 + 1
1 + 2
2 + 1
3

답안:

import java.io.*;

public class Main {
    static final int MOD = 1000000007;

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        long N = Long.parseLong(br.readLine());

        if (N == 1) {
            System.out.println(1);
            return;
        } else if (N == 2) {
            System.out.println(2);
            return;
        } else if (N == 3) {
            System.out.println(4);
            return;
        } else if (N == 4) {
            System.out.println(8);
            return;
        }

        long[] initial = {8, 4, 2, 1}; 
        long[][] T = {
                {1, 1, 1, 1},
                {1, 0, 0, 0},
                {0, 1, 0, 0},
                {0, 0, 1, 0}
        };

        long[][] result = matrixPower(T, N - 4);

        long dpN = 0;
        for (int i = 0; i < 4; i++) {
            dpN = (dpN + result[0][i] * initial[i]) % MOD;
        }

        System.out.println(dpN);
    }

    public static long[][] matrixMultiply(long[][] A, long[][] B) {
        int size = A.length;
        long[][] result = new long[size][size];

        for (int i = 0; i < size; i++) {
            for (int j = 0; j < size; j++) {
                result[i][j] = 0;
                for (int k = 0; k < size; k++) {
                    result[i][j] = (result[i][j] + A[i][k] * B[k][j]) % MOD;
                }
            }
        }

        return result;
    }

    public static long[][] matrixPower(long[][] T, long power) {
        int size = T.length;
        long[][] result = new long[size][size];

        for (int i = 0; i < size; i++) {
            result[i][i] = 1;
        }

        long[][] base = T;

        while (power > 0) {
            if (power % 2 == 1) {
                result = matrixMultiply(result, base);
            }
            base = matrixMultiply(base, base);
            power /= 2;
        }

        return result;
    }
}
