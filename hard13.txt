문제:
두 수 A, B를 bitwise-XOR 연산한 결과 A?B의 값은 다음과 같이 계산됩니다.
- A의 i번째 비트와 B의 i번째 비트가 같으면 A?B의 i번째 비트는 0이 됩니다.
- A의 i번째 비트와 B의 i번째 비트가 다르면 A?B의 i번째 비트는 1이 됩니다.

예를 들어 A = 6, B = 10이라고 가정하겠습니다.
A를 네 자릿수 이진수로 나타내면 0110이 됩니다.
B를 네 자릿수 이진수로 나타내면 1010이 됩니다.

A?B의 값은 다음 과정에 의해 12가 됩니다.
1) A의 첫번째 비트는 0, B의 첫번째 비트는 1이므로 A?B의 첫번째 비트는 1입니다.
2) A의 두번째 비트는 1, B의 두번째 비트는 0이므로 A?B의 두번째 비트는 1입니다.
3) A의 세번째 비트는 1, B의 세번째 비트는 1이므로 A?B의 세번째 비트는 0입니다.
4) A의 네번째 비트는 0, B의 네번째 비트는 0이므로 A?B의 네번째 비트는 0입니다.

N개의 양의 정수 중에서 두 개 이상의 양의 정수를 선택하였을 때, 선택된 수들의 XOR 값이 0이 되는 경우의 수를 구하는 프로그램을 작성해주세요.

예를 들어 N = 4이고 주어진 양의 정수들이 [1, 3, 2, 3]이라고 가정하겠습니다. 선택할 수 있는 모든 경우는 아래와 같이 총 11개입니다.
[1, 3], [1, 2], [1, 3], [3, 2], [3, 3], [2, 3], [1, 3, 2], [1, 3, 3], [1, 2, 3], [3, 2, 3], [1, 3, 2, 3]

이 중에서 XOR 값이 0이 되는 경우는 아래와 같이 총 3개입니다.
[3, 3], [1, 3, 2], [1, 2, 3]

답안:

import java.io.*;
import java.util.*;

public class Main {
    static int N; 
    static int[] number;
    static int result = 0; 
    static Map<String, Integer> memo;

    static void backtrack(int cnt, int temp) {

        if (cnt == N) {
            if (temp == 0) {
                result++;
            }
            return;
        }


        String key = cnt + "," + temp;
        if (memo.containsKey(key)) {
            result += memo.get(key);
            return;
        }

        int prevResult = result;

        backtrack(cnt + 1, temp ^ number[cnt]);

        backtrack(cnt + 1, temp);

        memo.put(key, result - prevResult);
    }

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        N = Integer.parseInt(br.readLine());
        number = new int[N];
        String[] temp = br.readLine().split(" ");
        for (int i = 0; i < N; i++) {
            number[i] = Integer.parseInt(temp[i]);
        }

        memo = new HashMap<>(); 
        backtrack(0, 0);
        System.out.println(result - 1); 
    }
}
